<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoCD</title>
  <subtitle>Continuous Delivery</subtitle>
  <id>https://preview.gocd.io/blog</id>
  <link href="https://preview.gocd.io/blog"/>
  <link href="https://preview.gocd.io/feed/rss.xml" rel="self"/>
  <updated>2017-02-16T00:00:00Z</updated>
  <author>
    <name>GoCD Team</name>
  </author>
  <entry>
    <title>Migrating from Snap CI to GoCD</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/02/16/migrating-snapci-to-gocd.html"/>
    <id>https://preview.gocd.io/2017/02/16/migrating-snapci-to-gocd.html</id>
    <published>2017-02-16T00:00:00Z</published>
    <updated>2017-02-16T00:00:00Z</updated>
    <author>
      <name>Suzie Prince - Product Manager at Snap CI</name>
    </author>
    <content type="html">Many Snap CI users are now looking for a replacement CI CD tool. In the end of life announcement we recommended that Snap CI users take a look at GoCD and consider it as an alternative.</content>
  </entry>
  <entry>
    <title>Why we've moved from go.cd to gocd.io</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/01/05/why-we-moved-from-go-cd-to-gocd-io.html"/>
    <id>https://preview.gocd.io/2017/01/05/why-we-moved-from-go-cd-to-gocd-io.html</id>
    <published>2017-01-05T00:00:00Z</published>
    <updated>2017-01-05T00:00:00Z</updated>
    <author>
      <name>GoCD team</name>
    </author>
    <content type="html">If you've been following us on twitter, our community forum, or tried to access our website in the past two weeks, you'll know that we've moved from https://go.cd to https://gocd.io. Learn more about it.</content>
  </entry>
  <entry>
    <title>.NET Core and GoCD</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/07/13/DotNet-Core-and-GoCD.html"/>
    <id>https://preview.gocd.io/2016/07/13/DotNet-Core-and-GoCD.html</id>
    <published>2016-07-13T00:00:00Z</published>
    <updated>2016-07-13T00:00:00Z</updated>
    <author>
      <name>Jason Rowe</name>
    </author>
    <content type="html">GoCD is a great way to learn the concepts and abstractions to help model your delivery pipeline and work towards improving it. This post documents setting up a .NET core project in GoCD in a minimal way for demo purposes.</content>
  </entry>
  <entry>
    <title>Don't let sunk costs sink your project</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/06/21/dont-let-sunk-costs-sink-your-project.html"/>
    <id>https://preview.gocd.io/2016/06/21/dont-let-sunk-costs-sink-your-project.html</id>
    <published>2016-06-21T00:00:00Z</published>
    <updated>2016-06-21T00:00:00Z</updated>
    <author>
      <name>Jeff Norris</name>
    </author>
    <content type="html">When we develop software projects, we can get into situations where we are also high-centered, places where it is difficult to make progress either forwards or backwards.</content>
  </entry>
  <entry>
    <title>Add performance testing to your Continuous Delivery pipeline</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/06/08/Add-performance-testing-to-your-Continuous-Delivery-pipeline.html"/>
    <id>https://preview.gocd.io/2016/06/08/Add-performance-testing-to-your-Continuous-Delivery-pipeline.html</id>
    <published>2016-06-08T00:00:00Z</published>
    <updated>2016-06-08T00:00:00Z</updated>
    <author>
      <name>Ken Mugrage</name>
    </author>
    <content type="html">Performance testing as part of a Continuous Delivery (CD) pipeline is rare. The intent of this article is to provide you with some pointers on the types of testing you can do on a regular basis, and to give some strategies for implementation.</content>
  </entry>
  <entry>
    <title>How to Avoid Brittle Code</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/03/24/how-to-avoid-brittle-code.html"/>
    <id>https://preview.gocd.io/2016/03/24/how-to-avoid-brittle-code.html</id>
    <published>2016-03-24T00:00:00Z</published>
    <updated>2016-03-24T00:00:00Z</updated>
    <author>
      <name>David Rice</name>
    </author>
    <content type="html">The most common problem with legacy code is brittleness. A brittle codebase is one that a team cannot change without great pain. In ThoughtWorks' 10 years of building products we've learned some hard lessons while trying to keep fairly large codebases malleable.</content>
  </entry>
  <entry>
    <title>Are you ready for Continuous Delivery? Part 2: Feedback loops</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/03/15/are-you-ready-for-continuous-delivery-part-2-feedback-loops.html"/>
    <id>https://preview.gocd.io/2016/03/15/are-you-ready-for-continuous-delivery-part-2-feedback-loops.html</id>
    <published>2016-03-15T00:00:00Z</published>
    <updated>2016-03-15T00:00:00Z</updated>
    <author>
      <name>David Rice</name>
    </author>
    <content type="html">This is the second part of a series of posts about Continuous Delivery infrastructure, culture, and process. In this post, we'll present some of the more common feedback loops your organization should have in place to determine your readiness for Continuous Delivery.</content>
  </entry>
  <entry>
    <title>Add Security Testing to Your Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/02/08/not-done-unless-its-done-security.html"/>
    <id>https://preview.gocd.io/2016/02/08/not-done-unless-its-done-security.html</id>
    <published>2016-02-08T00:00:00Z</published>
    <updated>2016-02-08T00:00:00Z</updated>
    <author>
      <name>Ken Mugrage</name>
    </author>
    <content type="html">Releasing with confidence means including things like security tests in your deployment pipeline</content>
  </entry>
  <entry>
    <title>Are you ready for Continuous Delivery?</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/01/25/are-you-ready-for-continuous-delivery.html"/>
    <id>https://preview.gocd.io/2016/01/25/are-you-ready-for-continuous-delivery.html</id>
    <published>2016-01-25T00:00:00Z</published>
    <updated>2016-01-25T00:00:00Z</updated>
    <author>
      <name>David Rice and Aravind SV</name>
    </author>
    <content type="html">This is the first part of a series of posts about Continuous Delivery infrastructure, culture, and process. In this first post, we'll present questions you need to answer honestly about your own people, teams, and organization to determine your readiness for Continuous Delivery.</content>
  </entry>
  <entry>
    <title>It's not Continuous Delivery if you can't deploy right now.</title>
    <link rel="alternate" href="https://preview.gocd.io/2016/01/17/not-done-unless-its-done.html"/>
    <id>https://preview.gocd.io/2016/01/17/not-done-unless-its-done.html</id>
    <published>2016-01-17T00:00:00Z</published>
    <updated>2016-01-17T00:00:00Z</updated>
    <author>
      <name>Ken Mugrage</name>
    </author>
    <content type="html">I hear people say all the time that they're practicing continuous delivery. This declaration is often followed by something like, &amp;ldquo;I can let the security team know anytime&amp;rdquo;, or &amp;ldquo;I just have to run the performance tests&amp;rdquo;. If you can't push your software to production right now, you're not done with your continuous delivery journey.</content>
  </entry>
</feed>
