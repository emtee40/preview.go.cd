<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoCD</title>
  <subtitle>Continuous Delivery</subtitle>
  <id>https://preview.gocd.io/blog</id>
  <link href="https://preview.gocd.io/blog"/>
  <link href="https://preview.gocd.io/feed/rss.xml" rel="self"/>
  <updated>2017-05-23T00:00:00Z</updated>
  <author>
    <name>GoCD Team</name>
  </author>
  <entry>
    <title>Part 5 - Control deployments using Manual Approvals: Modeling Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/05/23/control-deployments-manual-approvals.html"/>
    <id>https://preview.gocd.io/2017/05/23/control-deployments-manual-approvals.html</id>
    <published>2017-05-23T00:00:00Z</published>
    <updated>2017-05-23T00:00:00Z</updated>
    <author>
      <name>Aravind S.V, Product Manager at GoCD</name>
    </author>
    <content type="html">In this post, we will show you how to use a manual approval process to propagate your build which is especially useful for critical deployments. It not only gives you more control, but also prevents human error in complex pipelines thereby making your deployments safer.</content>
  </entry>
  <entry>
    <title>It’s not CI, it’s just CI theatre</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/05/16/its-not-CI-its-CI-theatre.html"/>
    <id>https://preview.gocd.io/2017/05/16/its-not-CI-its-CI-theatre.html</id>
    <published>2017-05-16T00:00:00Z</published>
    <updated>2017-05-16T00:00:00Z</updated>
    <author>
      <name>Suzie Prince (Head of Product), ThoughtWorks Products</name>
    </author>
    <content type="html">CI theatre describes the illusion of practising continuous integration while not really practising it. Based on our continuous integration research, we share what CI Theatre looks like, why we recommend you Hold on that, and ways to combat CI theatre.</content>
  </entry>
  <entry>
    <title>No One Agrees How to Define CI or CD</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/05/09/continuous-integration-devops-research.html"/>
    <id>https://preview.gocd.io/2017/05/09/continuous-integration-devops-research.html</id>
    <published>2017-05-09T00:00:00Z</published>
    <updated>2017-05-09T00:00:00Z</updated>
    <author>
      <name>Emily Luke (Head of Experience) and Suzie Prince (Head of Product), ThoughtWorks Products</name>
    </author>
    <content type="html">This blog post elaborates the results of our most recent contextual research study, how we conducted the study and our main findings. Our goal was to identify what users know about continuous integration (CI) and continuous delivery (CD) practices.</content>
  </entry>
  <entry>
    <title>What Does Pipelines as Code Really Mean?</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/05/02/what-does-pipelines-as-code-really-mean.html"/>
    <id>https://preview.gocd.io/2017/05/02/what-does-pipelines-as-code-really-mean.html</id>
    <published>2017-05-02T00:00:00Z</published>
    <updated>2017-05-02T00:00:00Z</updated>
    <author>
      <name>Badri Janakiraman and David Rice</name>
    </author>
    <content type="html">There has been increasing interest in defining builds and pipelines as code. We see a rise in the assumption that defining pipelines as code requires the use of a full programming language. This post will  break down how we got to build and pipelines as code and challenge some of the assumptions.</content>
  </entry>
  <entry>
    <title>Why GoCD over Jenkins</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/04/25/gocd-over-jenkins.html"/>
    <id>https://preview.gocd.io/2017/04/25/gocd-over-jenkins.html</id>
    <published>2017-04-25T00:00:00Z</published>
    <updated>2017-04-25T00:00:00Z</updated>
    <author>
      <name>David Rice, Managing Director - ThoughtWorks Products</name>
    </author>
    <content type="html">We often get asked by potential GoCD users why pick GoCD over Jenkins. In this post, we share why by comparing philosophy, getting started, continuous delivery, and plugins across the tools.</content>
  </entry>
  <entry>
    <title>Part 4 - Build Propagation using Fan-in/Fan-out: Modeling Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/04/17/build-propagation-using-fan-in-fan-out.html"/>
    <id>https://preview.gocd.io/2017/04/17/build-propagation-using-fan-in-fan-out.html</id>
    <published>2017-04-17T00:00:00Z</published>
    <updated>2017-04-17T00:00:00Z</updated>
    <author>
      <name>Aravind S.V, Product Manager at GoCD</name>
    </author>
    <content type="html">This is the fourth post in the series - Modeling Deployment Pipelines. In this post, we’ll dive into ways to move your build through the deployment pipeline and introducing fan-in/fan-out.</content>
  </entry>
  <entry>
    <title>Part 3 - Reusing Pipelines: Modeling Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/04/06/reusing-pipelines.html"/>
    <id>https://preview.gocd.io/2017/04/06/reusing-pipelines.html</id>
    <published>2017-04-06T00:00:00Z</published>
    <updated>2017-04-06T00:00:00Z</updated>
    <author>
      <name>Aravind S.V, Product Manager at GoCD</name>
    </author>
    <content type="html">This is the third post in the series - Modeling Deployment Pipelines. In this post, we'll look at some of the ways to reduce the duplication found between pipelines using templates.</content>
  </entry>
  <entry>
    <title>Part 2 - The beginnings of a real CD pipeline: Modeling Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/03/29/beginnings-of-a-real-pipeline.html"/>
    <id>https://preview.gocd.io/2017/03/29/beginnings-of-a-real-pipeline.html</id>
    <published>2017-03-29T00:00:00Z</published>
    <updated>2017-03-29T00:00:00Z</updated>
    <author>
      <name>Aravind S.V, Product Manager at GoCD</name>
    </author>
    <content type="html">This is the second post in the series - Modeling Deployment Pipelines. In this post, we'll look at some of the approaches to begin modeling a deployment pipeline for an application and a few ways they can be optimized. </content>
  </entry>
  <entry>
    <title>Part 1 - The Importance and Principles of Continuous Delivery Pipelines: Modeling Deployment Pipelines</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/03/01/importance-and-principles-of-cd-pipelines.html"/>
    <id>https://preview.gocd.io/2017/03/01/importance-and-principles-of-cd-pipelines.html</id>
    <published>2017-03-01T00:00:00Z</published>
    <updated>2017-03-01T00:00:00Z</updated>
    <author>
      <name>Aravind S.V, Product Manager at GoCD</name>
    </author>
    <content type="html">The path from commit to production involves numerous moving parts, (like multiple code and asset repositories, automatic and manual handoffs, unit tests, integration tests, acceptance tests, performance tests, security tests, etc.) and time that it takes to execute all of these elements. You need a way of modeling your workflow so that people can see, understand and talk about it. This is where CD pipelines come in.</content>
  </entry>
  <entry>
    <title>Migrating from Snap CI to GoCD</title>
    <link rel="alternate" href="https://preview.gocd.io/2017/02/16/migrating-snapci-to-gocd.html"/>
    <id>https://preview.gocd.io/2017/02/16/migrating-snapci-to-gocd.html</id>
    <published>2017-02-16T00:00:00Z</published>
    <updated>2017-02-16T00:00:00Z</updated>
    <author>
      <name>Suzie Prince - Product Manager at Snap CI</name>
    </author>
    <content type="html">Many Snap CI users are now looking for a replacement CI CD tool. In the end of life announcement we recommended that Snap CI users take a look at GoCD and consider it as an alternative.</content>
  </entry>
</feed>
